import React, { useState } from 'react';

/*
  AISyllabusStatementBuilder
  ------------------------------------------------------------
  Updates based on user feedback:
  1) The "Rationale for this policy" section (step 5) has four big categories, 
     each with its own unique set of sub-options (checkboxes).

     The four big categories are:
     A) "Students are allowed to use AI tools freely as they choose because…"
     B) "Students are only allowed to use AI tools in limited ways described below because…"
     C) "Students are not allowed to use AI tools, except when certain conditions are met as described below because…"
     D) "Students are not allowed to use specified AI tools because…"

     Each of these displays a different set of sub-options.

  2) A "Copy this statement" button on the last page (step 9) copies the final
     statement to the clipboard.

  3) The CalArts logo from the provided link should display at the top of each page:
     <img src="https://upload.wikimedia.org/wikipedia/commons/d/d7/Calarts_logo.svg" alt="CalArts Logo" />

  This is a single React component that uses Tailwind utility classes.
  Ensure Tailwind is correctly configured in your project for styling.
*/

function AISyllabusStatementBuilder() {
  const [currentStep, setCurrentStep] = useState(1);

  // Store user selections
  const [selections, setSelections] = useState({
    generalPolicy: "",
    appliedTools: [],
    conditions: [],
    processes: [],
    rationaleCategory: "", // The big rationale category
    rationaleSub: [],      // Sub-options for whichever rationaleCategory is chosen
    consequences: "",
    support: "",
    positionStatement: "",
  });

  // Each rationale category has its own sub-options
  const rationaleSubMap = {
    "Students are allowed to use AI tools freely as they choose because…": [
      "The students in this course have strong learning skills and have shown themselves to be responsible, effective, self-directed learners.",
      "I’ve designed robust assessments and learning activities in this course that have value regardless of the use of chatbots.",
      "The use of chatbots aligns with the goals of the course in a way that enhances learning.",
      "I consider learning to use AI tools an important skill in the discipline.",
      "Students are informed about AI, its risks and benefits, and can decide for themselves if and how they would use AI tools.",
      "Other:",
    ],
    "Students are only allowed to use AI tools in limited ways described below because…": [
      "The teaching team only has enough resources to support limited AI usage.",
      "We want students to develop other foundational skills first before relying heavily on AI.",
      "It's essential to ensure academic integrity by limiting AI usage to certain tasks or contexts.",
      "We must comply with departmental or institutional guidelines that only allow partial AI usage.",
      "Limited usage fosters deeper student engagement and critical thinking.",
      "Other:",
    ],
    "Students are not allowed to use AI tools, except when certain conditions are met as described below because…": [
      "Some aspects of the course require truly original or personal work that AI tools might compromise.",
      "We have concerns about privacy or data usage when AI tools are employed.",
      "AI usage might overshadow fundamental skill development if used improperly or excessively.",
      "Institutional policy restricts AI usage in certain assignment types requiring student-generated content.",
      "It's important to build a foundation of manual skills before introducing AI components.",
      "Other:",
    ],
    "Students are not allowed to use specified AI tools because…": [
      "Those tools do not comply with institutional or departmental policies or guidelines.",
      "Some tools pose software security or data privacy risk.",
      "The content generated by those tools lacks sufficient reliability or academic credibility.",
      "We aim to cultivate more authentic student-driven work for specific projects or assignments.",
      "Using those tools contravenes the ethical guidelines of the field or discipline.",
      "Other:",
    ],
  };

  // Handler for radio (single choice)
  const handleRadioChange = (category, value) => {
    setSelections((prev) => ({
      ...prev,
      [category]: value,
      // If changing the rationaleCategory, reset sub-options
      ...(category === "rationaleCategory" ? { rationaleSub: [] } : {}),
    }));
  };

  // Handler for checkbox (multiple choices)
  const handleCheckboxChange = (category, value) => {
    setSelections((prev) => {
      const currentVals = Array.isArray(prev[category]) ? [...prev[category]] : [];
      if (currentVals.includes(value)) {
        // Remove if already selected
        return { ...prev, [category]: currentVals.filter((item) => item !== value) };
      } else {
        // Add
        return { ...prev, [category]: [...currentVals, value] };
      }
    });
  };

  // Build the final statement
  const generateParagraph = () => {
    const {
      generalPolicy,
      appliedTools,
      conditions,
      processes,
      rationaleCategory,
      rationaleSub,
      consequences,
      support,
      positionStatement,
    } = selections;

    const lines = [];

    if (generalPolicy) {
      lines.push(`General policy about AI use in this course: ${generalPolicy}`);
    }
    if (appliedTools.length > 0) {
      lines.push(`The policy applies to the following AI tools: ${appliedTools.join("; ")}`);
    }
    if (conditions.length > 0) {
      lines.push(`The policy applies only under the following conditions: ${conditions.join("; ")}`);
    }
    if (processes.length > 0) {
      lines.push(`The following processes are in place: ${processes.join("; ")}`);
    }
    if (rationaleCategory) {
      lines.push(`Rationale for this policy: ${rationaleCategory}`);
      if (rationaleSub && rationaleSub.length > 0) {
        lines.push(`Reasons include: ${rationaleSub.join("; ")}`);
      }
    }
    if (consequences) {
      lines.push(`The following consequences for non-compliance apply: ${consequences}`);
    }
    if (support) {
      lines.push(`Support resources: ${support}`);
    }
    if (positionStatement) {
      lines.push(`Our position on supporting students: ${positionStatement}`);
    }

    let paragraph = lines.join(" ");
    // Remove any double or triple periods
    paragraph = paragraph.replace(/\.\.\./g, ".").replace(/\.\./g, ".").trim();

    // Add a period if it doesn't end with punctuation
    if (paragraph && !/[.!?]$/.test(paragraph)) {
      paragraph += ".";
    }
    return paragraph;
  };

  // Steps
  const steps = [
    {
      id: 1,
      title: "General policy about AI use in this course:",
      type: "radio",
      name: "generalPolicy",
      options: [
        "Students are allowed to use AI tools freely as they choose.",
        "Students are only allowed to use AI tools in the limited ways described below.",
        "Students are not allowed to use AI tools, except when certain conditions are met as described below.",
        "Students are never allowed to use AI tools",
        "Other:",
      ],
    },
    {
      id: 2,
      title: "The policy applies to the following AI tools:",
      type: "checkbox",
      name: "appliedTools",
      options: [
        "AI chatbots (ChatGPT, Google Gemini, Claude, CoPilot)",
        "AI image generators (DALL-E, Midjourney, Stable Diffusion, Adobe Firefly)",
        "AI code generators (CoPilot, Tabnine, Cody)",
        "AI audio/music generators (Amper, AIVA, Soundful)",
        "Specific tools:",
      ],
    },
    {
      id: 3,
      title: "The policy applies only under the following conditions:",
      type: "checkbox",
      name: "conditions",
      options: [
        "Only for specified assignments",
        "Only with proper citations and acknowledgment",
        "Only with supervision during class/section/office hours",
        "Only after students develop skills for using chatbots effectively",
        "Only by request and with instructor/teaching team approval",
        "Do not enter private, sensitive, or copyrighted data",
        "Only for graded assignments; for non-graded, students may use AI freely",
        "For reflection and ideation only (not for final assignment content)",
        "Other:",
      ],
    },
    {
      id: 4,
      title: "The following processes are in place regarding students using AI tools:",
      type: "checkbox",
      name: "processes",
      options: [
        "Contact the teaching team if you have questions about this policy.",
        "Students must talk to me before using AI tools in this course.",
        "Students are responsible for addressing any inaccuracies or biases in AI-generated content.",
        "Students must check for plagiarism and verify references from AI output.",
        "Include an author’s statement describing how AI was used and any issues addressed.",
        "Disclose AI usage (system used, dates, prompts) in documentation.",
        "Must cite AI outputs following APA or MLA guidelines.",
        "Include a reflection section on how and why AI was used, and its impact.",
        "Agree to class community agreements on responsible AI usage.",
        "Get informed consent from parties if using private or sensitive data.",
        "Demonstrate AI literacy by completing specific tasks first.",
        "Other:",
      ],
    },
    {
      id: 5,
      title: "Rationale for this policy:",
      type: "rationale-step",
      name: "rationaleCategory",
      options: [
        "Students are allowed to use AI tools freely as they choose because…",
        "Students are only allowed to use AI tools in limited ways described below because…",
        "Students are not allowed to use AI tools, except when certain conditions are met as described below because…",
        "Students are not allowed to use specified AI tools because…",
      ],
    },
    {
      id: 6,
      title: "The following consequences for non-compliance apply:",
      type: "radio",
      name: "consequences",
      options: [
        "If a student is suspected of violating this policy, the case may be referred for formal review...",
        "Any work missing required AI disclosures/statements may receive a grade penalty of...",
      ],
    },
    {
      id: 7,
      title: "The following support resources are available:",
      type: "radio",
      name: "support",
      options: [
        "If you have any questions, please talk with me or the teaching team. Our contact info is...",
        "Students can create a free account for these AI tools using CalArts email; we’ll cover how to sign up in class.",
        "AI use is optional and not mandatory. Equivalent alternatives are provided for all assignments.",
      ],
    },
    {
      id: 8,
      title: "This statement expresses our position on supporting students:",
      type: "radio",
      name: "positionStatement",
      options: [
        "If you’re struggling, please don't resort to AI as a shortcut. We understand stress is common, and we're here to help.",
        "A key goal is for you to develop your creative voice and style; I want to hear your thoughts, not a chatbot's.",
        "We understand privacy and ethical concerns about AI. We respect your choice not to use AI, and we can adapt accordingly.",
        "AI can be helpful but must be used responsibly. If it generates inaccuracies or bias, you must address them.",
        "Fairness and reciprocity matter. Everyone in this course, including me, follows these AI practices and policies.",
      ],
    },
  ];

  // Navigation
  const handleNext = () => {
    if (currentStep < steps.length) {
      setCurrentStep(currentStep + 1);
    }
  };
  const handlePrev = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };
  const onPreviewClick = () => {
    setCurrentStep(9);
  };

  // Copy to clipboard
  const handleCopyStatement = async () => {
    try {
      await navigator.clipboard.writeText(generateParagraph());
      alert("Statement copied to clipboard!");
    } catch (err) {
      alert("Failed to copy to clipboard, please try manually.");
    }
  };

  return (
    <div className="font-sans bg-gray-100 min-h-screen p-4">
      <div className="max-w-3xl mx-auto bg-white rounded shadow p-6">
        {/* CalArts logo at the top */}
        <div className="flex justify-center mb-4">
          <img
            src="https://upload.wikimedia.org/wikipedia/commons/d/d7/Calarts_logo.svg"
            alt="CalArts Logo"
            className="w-32 h-auto"
          />
        </div>

        <h1 className="text-2xl font-bold mb-4 text-center">
          AI Syllabus Statement Builder
        </h1>

        {/* Show steps 1..8 */}
        {currentStep <= steps.length && (
          <>
            <h2 className="text-lg font-semibold mb-2">
              {steps.find((s) => s.id === currentStep)?.title}
            </h2>

            {/* If step is #5 (rationale-step) */}
            {steps.find((s) => s.id === currentStep)?.type === "rationale-step" && (
              <div className="mb-4">
                {steps
                  .find((s) => s.id === currentStep)
                  ?.options.map((option) => (
                    <div key={option} className="flex items-center mb-2">
                      <input
                        type="radio"
                        name="rationaleCategory"
                        value={option}
                        checked={selections.rationaleCategory === option}
                        onChange={() => handleRadioChange("rationaleCategory", option)}
                        className="mr-2"
                      />
                      <label>{option}</label>
                    </div>
                  ))}

                {/* Show sub-options if the user picked one of the 4 categories */}
                {!!rationaleSubMap[selections.rationaleCategory] && (
                  <div className="mt-4 ml-4 border-l pl-4">
                    <p className="text-sm mb-2">Select relevant reasoning (check all that apply):</p>
                    {rationaleSubMap[selections.rationaleCategory].map((sub) => (
                      <div key={sub} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          value={sub}
                          checked={selections.rationaleSub.includes(sub)}
                          onChange={() => handleCheckboxChange("rationaleSub", sub)}
                          className="mr-2"
                        />
                        <label>{sub}</label>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {/* Other steps: radio or checkbox */}
            {steps.find((s) => s.id === currentStep)?.type !== "rationale-step" &&
              steps
                .find((s) => s.id === currentStep)
                ?.options.map((option) => {
                  const stepData = steps.find((s) => s.id === currentStep);
                  if (stepData?.type === "radio") {
                    return (
                      <div key={option} className="flex items-center mb-2">
                        <input
                          type="radio"
                          name={stepData.name}
                          value={option}
                          checked={selections[stepData.name] === option}
                          onChange={() => handleRadioChange(stepData.name, option)}
                          className="mr-2"
                        />
                        <label>{option}</label>
                      </div>
                    );
                  } else {
                    // type === "checkbox"
                    return (
                      <div key={option} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          value={option}
                          checked={selections[stepData.name].includes(option)}
                          onChange={() => handleCheckboxChange(stepData.name, option)}
                          className="mr-2"
                        />
                        <label>{option}</label>
                      </div>
                    );
                  }
                })}

            {/* Navigation */}
            <div className="mt-4 flex justify-between">
              <button
                disabled={currentStep === 1}
                onClick={handlePrev}
                className="py-2 px-4 bg-gray-300 text-black font-semibold rounded disabled:opacity-50"
              >
                Previous
              </button>
              {currentStep < steps.length && (
                <button
                  onClick={handleNext}
                  className="py-2 px-4 bg-blue-600 text-white font-semibold rounded"
                >
                  Next
                </button>
              )}
              {currentStep === steps.length && (
                <button
                  onClick={onPreviewClick}
                  className="py-2 px-4 bg-blue-600 text-white font-semibold rounded"
                >
                  Preview Draft Statement
                </button>
              )}
            </div>
          </>
        )}

        {/* Step 9: preview + copy */}
        {currentStep === 9 && (
          <div>
            <h2 className="text-lg font-bold mb-2 text-center">
              Preview of Your Syllabus Statement
            </h2>
            <p className="text-red-800 font-bold leading-relaxed mb-4">
              {generateParagraph()}
            </p>
            <div className="flex flex-col items-center gap-2">
              <button
                onClick={handleCopyStatement}
                className="py-2 px-4 bg-green-600 text-white font-semibold rounded"
              >
                Copy this statement
              </button>
              <button
                onClick={() => setCurrentStep(1)}
                className="py-2 px-4 bg-blue-600 text-white font-semibold rounded"
              >
                Start Over
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default AISyllabusStatementBuilder;
